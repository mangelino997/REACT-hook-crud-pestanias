{"version":3,"sources":["components/toast.js","components/addUser.js","components/tabs.js","components/updateUser.js","components/listUser.js","App.js","serviceWorker.js","index.js"],"names":["Toast","className","role","type","class","data-dismiss","aria-label","aria-hidden","AddUser","props","useForm","register","errors","handleSubmit","useState","showToast","setShowToast","onSubmit","data","e","preventDefault","addUser","target","reset","placeholder","name","ref","required","value","message","maxLength","minLength","lastname","Tabs","id","data-toggle","href","aria-controls","aria-selected","UpdateUser","u","user","setUser","userSelected","console","log","updateUser","onChange","list","map","index","key","defaultValue","litsUser","scope","onClick","deleteUser","App","users","setUsers","aria-labelledby","shortid","generate","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5b61f0cf.chunk.js","sourcesContent":["import React, {Fragment } from 'react';\r\n\r\nconst Toast = () => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"alert alert-success alert-dismissible fade show \" role=\"alert\">\r\n                Agregado con éxito\r\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Toast;","import React, { Fragment, useState } from 'react';\r\nimport { useForm } from 'react-hook-form'  //mediante npm install react-hook-form\r\nimport Toast from './toast'\r\nconst AddUser = (props) => {\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const [showToast, setShowToast] = useState(false)\r\n\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault()\r\n        props.addUser(data)\r\n        setShowToast(true)\r\n        e.target.reset()\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese nombre de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Nombre es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.name?.message}\r\n                    </span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese apellido de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"lastname\"\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Apellido es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.lastname?.message}\r\n                    </span>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-success\">\r\n                    Agregar\r\n                                    </button>\r\n            </form>\r\n            <div className=\"p-2\">\r\n                {showToast ? <Toast></Toast> : ''}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default AddUser;","import React, { Fragment } from 'react';\r\n\r\nconst Tabs = () => {\r\n    return (\r\n        <Fragment>\r\n            <nav>\r\n                <div className=\"nav nav-tabs nav-fill\" id=\"nav-tab\" role=\"tablist\">\r\n                    <a className=\"nav-item nav-link active\" id=\"nav-add-tab\" data-toggle=\"tab\" href=\"#nav-add\" \r\n                    role=\"tab\" aria-controls=\"nav-add\" aria-selected=\"true\">Agregar</a>\r\n                    <a className=\"nav-item nav-link\" id=\"nav-update-tab\" data-toggle=\"tab\" href=\"#nav-update\" \r\n                    role=\"tab\" aria-controls=\"nav-update\" aria-selected=\"false\">Actualizar</a>\r\n                    <a className=\"nav-item nav-link\" id=\"nav-list-tab\" data-toggle=\"tab\" href=\"#nav-list\" \r\n                    role=\"tab\" aria-controls=\"nav-list\" aria-selected=\"false\">Listar</a>\r\n                </div>\r\n            </nav>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Tabs;","import React, { Fragment, useState } from 'react';\r\nimport { useForm } from 'react-hook-form'  //mediante npm install react-hook-form\r\n\r\nconst UpdateUser = (props) => {\r\n\r\n    const { register, errors, handleSubmit } = useForm();\r\n    const u = {\r\n        id: '', \r\n        name: '', \r\n        lastname: ''\r\n    }\r\n    const [user, setUser] = useState(u)\r\n\r\n    const onSubmit = (data, e) => {\r\n        e.preventDefault()\r\n        data.id = user.id\r\n        props.updateUser(data)\r\n        e.target.reset()\r\n        setUser(u)\r\n    }\r\n    const handleChange = (e) => {\r\n        console.log(e.target.value)\r\n        userSelected(props.list[e.target.value])\r\n    }\r\n    //recibe el usuario a actualizar\r\n    const userSelected = (data) => {\r\n        console.log(data)\r\n        data? setUser(data) : setUser(u)\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <select className=\"form-control form-control-sm\" onChange={handleChange}>\r\n                <option>Seleccione un usuario</option>\r\n\r\n                    {props.list.map((user, index) =>\r\n                        <option key={user.id} value={index}>{user.name} {user.lastname}</option>\r\n                    )\r\n                    }\r\n                </select><br />\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese nombre de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"name\"\r\n                        defaultValue={user.name}\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Nombre es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.name?.message}\r\n                    </span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        placeholder=\"Ingrese apellido de usuario\"\r\n                        className=\"form-control\"\r\n                        name=\"lastname\"\r\n                        defaultValue={user.lastname}\r\n                        ref={register({\r\n                            required: {\r\n                                value: true,\r\n                                message: 'Apellido es requerido'\r\n                            },\r\n                            maxLength: {\r\n                                value: 10,\r\n                                message: 'No más de 5 carácteres!'\r\n                            },\r\n                            minLength: {\r\n                                value: 4,\r\n                                message: 'Mínimo 2 carácteres'\r\n                            }\r\n                        })}\r\n                    ></input>\r\n                    <span className=\"text-danger text-small d-block mb-2\">\r\n                        {errors?.lastname?.message}\r\n                    </span>\r\n                </div>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-success\">\r\n                    Actualizar\r\n                                    </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default UpdateUser;","import React, { Fragment } from 'react';\r\n\r\nconst litsUser = (props) => {\r\n    \r\n    return (\r\n        <Fragment>\r\n            \r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">LastName</th>\r\n                        <th scope=\"col\">-</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.list.map((user, index) =>\r\n\r\n                        <tr key={user.id} >\r\n                            <th scope=\"row\">{user.id}</th>\r\n                            <td>{user.name}</td>\r\n                            <td>{user.lastname}</td>\r\n                            <td>\r\n                                <button\r\n                                    className=\"btn btn-sm btn-danger\"\r\n                                    onClick={() => { props.deleteUser(user.id) }}>\r\n                                    Delete\r\n                                </button>\r\n                            </td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default litsUser;","import React, { useState } from 'react';\nimport './App.css';\nimport AddUser from './components/addUser';\nimport Tabs from './components/tabs';\nimport UpdateUser from './components/updateUser';\nimport LitsUser from './components/listUser';\nimport shortid from 'shortid' //npm install shortid\n\nfunction App() {\n\n  const [user, setUser] = useState();\n  const [users, setUsers] = useState([]);\n  const [action, setAction] = useState('add');\n\n  //agrega un usuario \n  const addU = (data) => {\n    data.id = shortid.generate()\n    console.log(data)\n    setUsers([\n      ...users, // con los ... estamos haciendo una copia del array que teníamos antes, gracias a eso\n      //evitamos que se limpie el array en cada setUsers (estamos concatenando)\n      data\n    ])\n  }\n\n  //actualiza la lista de usuarios\n  const updateU = (data) => {\n    console.log(data)\n    setUsers(users.map((user, index) => (user.id === data.id ? users[index] = data : user)))\n    console.log(users)\n  }\n\n  //elimina un usuario \n  const deleteU = (id) => {\n    //el filter devuelve un array con todos los usuarios que no tienen el mismo id pasado como parametro\n    //excluye unicamente cuando se cumple la condicion\n    setUsers(users.filter(user => user.id !== id))\n  }\n\n  return (\n    <div className=\"App\">\n      <section id=\"tabs\" className=\"project-tab\">\n        <div className=\"container\">\n          <div className=\"row justify-content-center p-3\">\n            <h1 className=\"text-primary\">Gestión de usuarios con pestañas</h1>\n            <div className=\"col-md-6 p-5\">\n              <Tabs></Tabs>\n              <br />\n              <div className=\"tab-content\" id=\"nav-tabContent\">\n                <div className=\"tab-pane fade show active\" id=\"nav-add\" role=\"tabpanel\" aria-labelledby=\"nav-add-tab\">\n                  <AddUser addUser={addU}></AddUser>\n                </div>\n                <div className=\"tab-pane fade\" id=\"nav-update\" role=\"tabpanel\" aria-labelledby=\"nav-update-tab\">\n                  <UpdateUser list={users} updateUser={updateU}></UpdateUser>\n                </div>\n                <div className=\"tab-pane fade\" id=\"nav-list\" role=\"tabpanel\" aria-labelledby=\"nav-list-tab\">\n                  <LitsUser list={users} deleteUser={deleteU}></LitsUser>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}